;// SYMPL Rule Definitions for CustomASM cross-assembler
;// (this version uses ":" and "=" in the ISA syntax 
;//
;// Author:  Jerry D. Harthcock
;// Version:  1.01  August 30, 2021
;// Copyright (C) 2021.  All rights reserved.
;//
;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;//                                                                                                                  //
;//                                                Open-Source                                                       //
;//                                SYMPL 64-Bit Universal Floating-Point ISA                                         //
;//                                Evaluation and Product Development License                                        //
;//                                                                                                                  //
;//                                                                                                                  //
;// Open-source means that this source code may be freely downloaded, copied, modified, distributed and used in      //
;// accordance with the terms and conditons of the licenses provided herein.                                         //
;//                                                                                                                  //
;// Provided that you comply with all the terms and conditions set forth herein, Jerry D. Harthcock ("licensor"),    //
;// the original author and exclusive copyright owner of this SYMPL 64-Bit Universal Floating-Point ISA and related  //
;// development software ("this IP") hereby grants recipient of this IP ("licensee"), a world-wide, paid-up,         //
;// non-exclusive license to use this IP only for the non-commercial purposes of evaluation, education, and          //
;// development of end products and related development tools.                                                       //
;//                                                                                                                  //
;// Any copying, distribution, customization, modification, or derivative work of this IP must include an exact copy //
;// of this license and original copyright notice at the very top of each source file and any derived netlist, and,  //
;// in the case of binaries, a printed copy of this license and/or a text format copy in a separate file distributed //
;// with said netlists or binary files having the file name, "LICENSE.txt".  You, the licensee, also agree not to    //
;// remove any copyright notices from any source file covered or distributed under this Evaluation and Product       //
;// Development License.                                                                                             //
;//                                                                                                                  //
;// LICENSOR DOES NOT WARRANT OR GUARANTEE THAT YOUR USE OF THIS IP WILL NOT INFRINGE THE RIGHTS OF OTHERS OR        //
;// THAT IT IS SUITABLE OR FIT FOR ANY PURPOSE AND THAT YOU, THE LICENSEE, AGREE TO HOLD LICENSOR HARMLESS FROM      //
;// ANY CLAIM BROUGHT BY YOU OR ANY THIRD PARTY FOR YOUR SUCH USE.                                                   //
;//                                                                                                                  //
;//                                               N O T I C E                                                        //
;//                                                                                                                  //
;// Licensor reserves all his rights, including, but in no way limited to, the right to change or modify the terms   //
;// and conditions of this Evaluation and Product Development License anytime without notice of any kind to anyone.  //
;// By using this IP for any purpose, you agree to all the terms and conditions set forth in this Evaluation and     //
;// Product Development License.                                                                                     //
;//                                                                                                                  //
;// This Evaluation and Product Development License does not include the right to sell products that incorporate     //
;// this IP or any IP derived from this IP. If you would like to obtain such a license, please contact Licensor.     //           
;//                                                                                                                  //
;// Licensor can be contacted at:  SYMPL.gpu@gmail.com                                                               //
;//                                                                                                                  //
;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#bits 64
#labelalign 64

#subruledef Mode   ;universal mode bits (bits [63:62] of instruction
{
    _   => 0x0     ;default mode
    P   => 0x1     ;round towards positive inf mode
    N   => 0x2     ;round towards negative inf mode
    Z   => 0x3     ;truncate mode
    ACC => 0x1     ;fused artificial neural network accumulate mode
    ACT => 0x2     ;fused artificial neural network activate mode
    AA  => 0x3     ;fused artificial neural network accumulate AND activate mode
}

#subruledef auxReg
{
    AR0 => 0x0
    AR1 => 0x1
    AR2 => 0x2
    AR3 => 0x3
    AR4 => 0x4
    AR5 => 0x5
    AR6 => 0x6
    SP  => 0x7
}

#subruledef sType  ;shift type
{
    LEFT  => 0x0 
    LSL   => 0x1 
    COPY  => 0x2 
    ROL   => 0x3 
    RIGHT => 0x4 
    LSR   => 0x5 
    ASR   => 0x6 
    ROR   => 0x7
}

;--------------------------------------------------------------------------
;   Data type/size specifiers for DESTINATION and SOURCE operands A and B  
;--------------------------------------------------------------------------
#subruledef Size   ;destination or operand size specifier with signal bit
{
_1   =>  0x0        ;1-byte size specifier with Signal bit clear       
_2   =>  0x1        ;2-byte size specifier with Signal bit clear       
_4   =>  0x2        ;4-byte size specifier with Signal bit clear       
_8   =>  0x3        ;8-byte size specifier with Signal bit clear       
_16  =>  0x4        ;16-byte size specifier with Signal bit clear       
_32  =>  0x5        ;32-byte size specifier with Signal bit clear       
_64  =>  0x6        ;64-byte size specifier with Signal bit clear       
_128 =>  0x7        ;128-byte size specifier with Signal bit clear       
     
s1   =>  0x8        ;1-byte size specifier with Signal bit set
s2   =>  0x9        ;2-byte size specifier with Signal bit set
s4   =>  0xA        ;4-byte size specifier with Signal bit set
s8   =>  0xB        ;8-byte size specifier with Signal bit set
s16  =>  0xC        ;16-byte size specifier with Signal bit set
s32  =>  0xD        ;32-byte size specifier with Signal bit set
s64  =>  0xE        ;64-byte size specifier with Signal bit set
s128 =>  0xF        ;128-byte size specifier with Signal bit set
}

#ruledef
{
;NOP
        {mpmode: Mode} => mpmode`2 @ 0x0000000000000000`62 
        
;direct destination = immediate srcA only can be up to 36 bits       
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} =  {srcAsize: Size}:#{imm36:i36} => mpmode`2 @ 0x3`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ imm36
        
;indirect destination with post modification = immediate srcA only can be up to 36 bits       
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] =  {srcAsize: Size}:#{imm36:i36} => mpmode`2 @ 0x3`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt    @ ARnDest`3 @ srcAsize`4 @ imm36
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] =  {srcAsize: Size}:#{imm36:i36} => mpmode`2 @ 0x3`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ imm36
        
;indirect destination with offset = immediate srcA only can be up to 36 bits       
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] =  {srcAsize: Size}:#{imm36:i36} => mpmode`2 @ 0x3`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ imm36
        
;direct destination = table-read srcA only      
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} =  {srcAsize: Size}:@{tablrAddr:u16} => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ tablrAddr @ 0x00000`20

;indirect destination with post modification = table-read srcA only       
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] =  {srcAsize: Size}:@{tablrAddr:u16} => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt       @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ 0x00000`20
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] =  {srcAsize: Size}:@{tablrAddr:u16} => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ 0x00000`20
        
;indirect destination with offset = table-read srcA only       
        {mpmode: Mode} {destSize: Size}:*{ARnDest: auxReg}[{DestOffset:s11}] =  {srcAsize: Size}:@{tablrAddr:u16} => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x3`2 @ DestOffset     @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ 0x00000`20
        
;direct destination = direct srcA only       
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = {srcAsize: Size}:{dirSrcAaddrs: u15} => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ 0x00000`20

;direct destination = indirect post modification srcA only       
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = {srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00000`20
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = {srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00000`20
        
;direct destination = indirect with offset srcA only       
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15}  =  {srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ 0x00000`20

;indirect auto-postmod destination = direct srcA only 
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = {srcAsize: Size}:{dirSrcAaddrs: u15}  => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt       @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ 0x00000`20
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = {srcAsize: Size}:{dirSrcAaddrs: u15}  => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ 0x00000`20

;indirect with offset destination = direct srcA only 
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] =  {srcAsize: Size}:{dirSrcAaddrs: u15} => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ 0x00000`20
        

;indirect destination = indirect SrcA only
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00000`20
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00000`20 
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}]       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ 0x00000`20

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2  @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00000`20
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2  @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00000`20 
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}]       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2  @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ 0x00000`20

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2  @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00000`20
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}] => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2  @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00000`20 
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] =  {srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}]       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2  @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ 0x00000`20

;direct destination = (direct SrcA, #immediate SrcB)
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15}  = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ imm16
        
;direct destination = (indirect SrcA, #immediate SrcB)
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} =  ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt       @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} =  ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} =  ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset                   @ ARnSrcA`3 @ srcBsize`4 @ imm16

;indirect destination = (direct SrcA, #immediate SrcB)
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt    @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}]       = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ imm16

;indirect destination = (indirect SrcA, #immediate SrcB)
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ srcBsize`4 @ imm16

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ srcBsize`4 @ imm16

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ imm16
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {srcBsize: Size}:#{imm16:i16}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ srcBsize`4 @ imm16


;direct destination = (table-read srcA, direct srcB)      
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:{dirSrcBaddrs: u15}) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ dirSrcBaddrs

;direct destination = (table-read srcA, indirect srcB)      
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size},@{tablrAddr:u16}, {srcBsize:u4},*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size},@{tablrAddr:u16}, {srcBsize:u4},*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size},@{tablrAddr:u16}, {srcBsize:u4},*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

;indirect destination = (table-read srcA, indirect srcB)      
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:@{tablrAddr:u16}, {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x2`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ tablrAddr @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3


;direct destination = (direct srcA, direct srcB)      
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize:u4}:{dirSrcBaddrs: u15}) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ 0x0`1 @ dirSrcBaddrs

;direct destination = (indirect srcA, direct srcB)     
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:{dirSrcBaddrs: u15}) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ srcBsize`4 @ 0x0`1 @ dirSrcBaddrs
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:{dirSrcBaddrs: u15}) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x0`1 @ dirSrcBaddrs
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {srcBsize:u4}:{dirSrcBaddrs: u15}) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ srcBsize`4 @ 0x0`1 @ dirSrcBaddrs

;direct destination = (direct srcA, indirect srcB)     
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

;direct destination = (indirect srcA, indirect srcB)     
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

;indirect destination = (indirect srcA, indirect srcB)      
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11  @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x2`2 @ {0x000`11-DestPostDecAmt}`11 @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size},*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4},*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size},*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4},*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size},*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {srcBsize:u4},*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3
                                    
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}++[{SrcBpostIncAmt:u10}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ 0x0`1 @ SrcBpostIncAmt @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}--[{SrcBpostDecAmt:u11}]) => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x2`2 @ {0x000`11-SrcBpostDecAmt}`11 @ ARnSrcB`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}], {srcBsize:u4}:*{ARnSrcB:auxReg}[{SrcBoffset:s11}])       => mpmode`2 @ 0x0`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ srcBsize`4 @ 0x3`2 @ SrcBoffset @ ARnSrcB`3

;SHIFT operator
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:{dirSrcAaddrs: u15},                       {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs                             @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt       @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:{dirDestAddr: u15} = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ dirDestAddr @ srcAsize`4 @ 0x3`2 @ SrcAoffset                   @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:{dirSrcAaddrs: u15},                    {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs                        @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}++[{DestPostIncAmt:u10}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ 0x0`1 @ DestPostIncAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:{dirSrcAaddrs: u15},                    {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ DestPostDecAmt @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs                        @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ DestPostDecAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ DestPostDecAmt @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}--[{DestPostDecAmt:u11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x2`2 @ DestPostDecAmt @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3

        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:{dirSrcAaddrs: u15},                    {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs                        @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3
        {mpmode: Mode} {destSize: Size}:*{ARnDest:auxReg}[{DestOffset:s11}] = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {shiftType:sType}, {noBits:u5}) => mpmode`2 @ 0x1`2 @ destSize`4 @ 0x3`2 @ DestOffset @ ARnDest`3 @ srcAsize`4 @ 0x3`2 @ SrcAoffset                @ ARnSrcA`3 @ 0x00`6 @ {noBits-1}`5 @ 0x00`6 @ shiftType`3

;relative long unconditional branch
        {mpmode: Mode} {destSize: Size}:PCR = {branchAddrs:u36} => mpmode`2 @ 0x3`2 @ destSize`4 @ 0x0`1 @ 0x7FF6`15 @ 0x3`4 @ {branchAddrs-$}`36
        
;relative bit test and branch if tested bit is set
        {mpmode: Mode} {destSize: Size}:PCS = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {bitNo:u6}, {branchAddrs:u36})                       =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF4`15 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ bitNo @ {branchAddrs-$}`14 
        {mpmode: Mode} {destSize: Size}:PCS = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {bitNo:u6}, {branchAddrs:u36}) =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF4`15 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ bitNo @ {branchAddrs-$}`14 
        {mpmode: Mode} {destSize: Size}:PCS = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {bitNo:u6}, {branchAddrs:u36}) =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF4`15 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ bitNo @ {branchAddrs-$}`14 
        {mpmode: Mode} {destSize: Size}:PCS = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {bitNo:u6}, {branchAddrs:u36}) =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF4`15 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ bitNo @ {branchAddrs-$}`14 

;relative bit test and branch if tested bit is clear
        {mpmode: Mode} {destSize: Size}:PCC = ({srcAsize: Size}:{dirSrcAaddrs: u15}, {bitNo:u6}, {branchAddrs:u36})                       =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF3`15 @ srcAsize`4 @ 0x0`1 @ dirSrcAaddrs @ bitNo @ {branchAddrs-$}`14 
        {mpmode: Mode} {destSize: Size}:PCC = ({srcAsize: Size}:*{ARnSrcA:auxReg}++[{SrcApostIncAmt:u10}], {bitNo:u6}, {branchAddrs:u36}) =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF3`15 @ srcAsize`4 @ 0x2`2 @ 0x0`1 @ SrcApostIncAmt    @ ARnSrcA`3 @ bitNo @ {branchAddrs-$}`14 
        {mpmode: Mode} {destSize: Size}:PCC = ({srcAsize: Size}:*{ARnSrcA:auxReg}--[{SrcApostDecAmt:u11}], {bitNo:u6}, {branchAddrs:u36}) =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF3`15 @ srcAsize`4 @ 0x2`2 @ {0x000`11-SrcApostDecAmt}`11 @ ARnSrcA`3 @ bitNo @ {branchAddrs-$}`14 
        {mpmode: Mode} {destSize: Size}:PCC = ({srcAsize: Size}:*{ARnSrcA:auxReg}[{SrcAoffset:s11}],       {bitNo:u6}, {branchAddrs:u36}) =>  mpmode`2 @ 0x1`2 @ destSize`4 @ 0x0`1 @ 0x7FF3`15 @ srcAsize`4 @ 0x3`2 @ SrcAoffset @ ARnSrcA`3 @ bitNo @ {branchAddrs-$}`14

}

;-----------------------------------------------------------------------------
;   Activation Mode Specifiers
;-----------------------------------------------------------------------------
ident      =  0
SQNL       =  1
ReLU       =  2
LReLU      =  3
HardTan    =  4
SQ_RBF     =  5
Exp        =  6
TanH       =  7
SoftStep   =  8
Logistic   =  8
SoftPlus   =  9
Gaussian   =  10
SoftMax    =  11
HardMax    =  12

;--------------------------------------------------------------------------           
;         internal memory-mapped h/w registers
;--------------------------------------------------------------------------

SP_TOS      =     0x7FFF     ;reading this location will return the contents at the top of stack without affecting SP
SP          =     0x7FFE     ;stack pointer
AR6         =     0x7FFD     ;Auxiliary Reg 6
AR5         =     0x7FFC     ;Auxiliary Reg 5
AR4         =     0x7FFB     ;Auxiliary Reg 4
AR3         =     0x7FFA     ;Auxiliary Reg 3
AR2         =     0x7FF9     ;Auxiliary Reg 2
AR1         =     0x7FF8     ;Auxiliary Reg 1
AR0         =     0x7FF7     ;Auxiliary Reg 0
;PC_REL      =     0x7FF6     ;load PC with unconditional 32-bit relative branch value
PC          =     0x7FF5     ;Program Counter
;PCS         =     0x7FF4     ;conditional load PC "set" with 13-bit relative branch value
;PCC         =     0x7FF3     ;conditional load PC "clear" with 13-bit relative branch value
PC_COPY     =     0x7FF2     ;anytime a PC discontinuity happens, a copy of the original is automatically placed here
STATUS      =     0x7FF1     ;Status Register
PRNG        =     0x7FF0     ;pseudo-random number generator
REPEAT      =     0x7FEF     ;repeat counter location
LPCNT1      =     0x7FEE     ;H/W loop counter 1
LPCNT0      =     0x7FED     ;H/W loop counter 0
TIMER       =     0x7FEC     ;timer
MONITR_REG  =     0x7FEB
                    
SCHEDULER   =     0x7FEA     ;for interleaving multithreading version
SCHEDCMP    =     0x7FE9

SPARE_VEC1  =     0x7FE8                                      
SPARE_VEC0  =     0x7FE7                                      
NMI_VECT    =     0x7FE6                                      
IRQ_VECT    =     0x7FE5                                      
INV_VECT    =     0x7FE4                                      
DIVx0_VECT  =     0x7FE3
OVFL_VECT   =     0x7FE2
UNFL_VECT   =     0x7FE1
INEXT_VECT  =     0x7FE0

XCU_C_R     =     0x7FDF     ;r/w  XCU_CONTROL_REGISTER
XCU_S_R     =     0x7FDE     ;r/w  XCU_STATUS_REGISTER
                          
CAPTURE3    =     0x7FDD     ;alternate delayed exception capture register 3
CAPTURE2    =     0x7FDC     ;alternate delayed exception capture register 2
CAPTURE1    =     0x7FDB     ;alternate delayed exception capture register 1
CAPTURE0    =     0x7FDA     ;alternate delayed exception capture register 0

savAllFlags =     0x7FD9     ;reading this location will return all flags
sgtBinRnDir =     0x7FD8     ;read/write this location to get/set current rounding direction here
savedModes  =     0x7FD7     ;savedModes should be the destination of the sgtBinRnDir operation
class       =     0x7FD6     ;write/read here to get encoded class
radix       =     0x7FD5     ;read this location to get 0x02

compare     =     0x7FCF     ;integer compare address (size of destination must be 2'b00, ie, byte)
tstSavFlg   =     0x7FCE     ;test "saved" flags 
actMode     =     0x7FCD     ;neural network activation mode                     

cmpSE       =     0x7CFF     ;cmpSE  byte address compareSignalingEqual(source1, source2)           
cmpQE       =     0x7CFE     ;cmpQE   byte address compareQuietEqual(source1, source2)               
cmpSNE      =     0x7CFD     ;cmpSNE  byte address compareSignalingNotEqual(source1, source2)        
cmpQNE      =     0x7CFC     ;cmpQNE  byte address compareQuietNotEqual(source1, source2)            
cmpSG       =     0x7CFB     ;cmpSG  byte address compareSignalingGreater(source1, source2)         
cmpQG       =     0x7CFA     ;cmpQG  byte address compareQuietGreater(source1, source2)             
cmpSGE      =     0x7CF9     ;cmpSGE  byte address compareSignalingGreaterEqual(source1, source2)    
cmpQGE      =     0x7CF8     ;cmpQGE  byte address compareQuietGreaterEqual(source1, source2)        
cmpSL       =     0x7CF7     ;cmpSL  byte address compareSignalingLess(source1, source2)            
cmpQL       =     0x7CF6     ;cmpQL  byte address compareQuietLess(source1, source2)                
cmpSLE      =     0x7CF5     ;cmpSLE  byte address compareSignalingLessEqual(source1, source2)       
cmpQLE      =     0x7CF4     ;cmpQLE  byte address compareQuietLessEqual(source1, source2)           
cmpSNG      =     0x7CF3     ;cmpSNG  byte address compareSignalingNotGreater(source1, source2)      
cmpQNG      =     0x7CF2     ;cmpQNG  byte address compareQuietNotGreater(source1, source2)          
cmpSLU      =     0x7CF1     ;cmpSLU  byte address compareSignalingLessUnordered(source1, source2)   
cmpQLU      =     0x7CF0     ;cmpQLU  byte address compareQuietLessUnordered(source1, source2)       
cmpSNL      =     0x7CEF     ;cmpSNL  byte address compareSignalingNotLess(source1, source2)         
cmpQNL      =     0x7CEE     ;cmpQNL  byte address compareQuietNotLess(source1, source2)             
cmpSGU      =     0x7CED     ;cmpSGU  byte address compareSignalingGreaterUnordered(source1, source2)
cmpQGU      =     0x7CEC     ;cmpQGU  byte address compareQuietGreaterUnordered(source1, source2)    
cmpQU       =     0x7CEB     ;cmpQU  byte address compareQuietUnordered(source1, source2) 
cmpQO       =     0x7CEA     ;cmpQO  byte address compareQuietOrdered(source1, source2)             
tOrd        =     0x7CE9     ;total order
tOrdM       =     0x7CE8     ;total order magnitude           
razFlg      =     0x7CE7;     
lowFlg      =     0x7CE6;                                      
razNoFlag   =     0x7CE5;     
lowNoFlag   =     0x7CE4;     
tstFlg      =     0x7CE3;                                
rstrFlg     =     0x7CE2;
razSig      =     0x7CE1;     
lowSig      =     0x7CE0;     
setSubstt   =     0x7CDF;     
clrSubstt   =     0x7CDE;     
setDVCNZ    =     0x7CDD;     
clrDVCNZ    =     0x7CDC;     
setAltImm   =     0x7CDB;     
clrAltImm   =     0x7CDA;     
deflt       =     0x7CD9;
isCanonical =     0x7CD8;
isSignaling =     0x7CD7;
isNaN       =     0x7CD6;
isInfinite  =     0x7CD5;
isSubnormal =     0x7CD4;
isZero      =     0x7CD3;
isFinite    =     0x7CD2;
isNormal    =     0x7CD1;
isSignMinus =     0x7CD0;



XCU_PREEMPT        =   0x7FD4
XCU_SSTEP          =   0x7FD3
XCU_FORCE_BREAK    =   0x7FD2
XCU_FORCE_RESET    =   0x7FD1
is2008             =   0x7FD0   ;read this location to get 0x01--true

XCU_MON_POKE_ALL   =   0x7FC0
XCU_MON_REQUEST_F  =   0x7FBF
XCU_MON_REQUEST_E  =   0x7FBE
XCU_MON_REQUEST_D  =   0x7FBD
XCU_MON_REQUEST_C  =   0x7FBC
XCU_MON_REQUEST_B  =   0x7FBB
XCU_MON_REQUEST_A  =   0x7FBA
XCU_MON_REQUEST_9  =   0x7FB9
XCU_MON_REQUEST_8  =   0x7FB8
XCU_MON_REQUEST_7  =   0x7FB7
XCU_MON_REQUEST_6  =   0x7FB6
XCU_MON_REQUEST_5  =   0x7FB5
XCU_MON_REQUEST_4  =   0x7FB4
XCU_MON_REQUEST_3  =   0x7FB3
XCU_MON_REQUEST_2  =   0x7FB2
XCU_MON_REQUEST_1  =   0x7FB1
XCU_MON_REQUEST_0  =   0x7FB0

MON_REQUEST_0  =   0x7FB0

is1985      =     0x00000000 ;read this location to get 0x00--false
                         
;----------------------------------------------------------------------------------------------
;eXtended Compute Unit (XCU) operators
;----------------------------------------------------------------------------------------------
XCUpushAll  =     0x7FC0

pshXCU_15   =     0x7FBF
pshXCU_14   =     0x7FBE
pshXCU_13   =     0x7FBD
pshXCU_12   =     0x7FBC
pshXCU_11   =     0x7FBB
pshXCU_10   =     0x7FBA
pshXCU_9    =     0x7FB9
pshXCU_8    =     0x7FB8
pshXCU_7    =     0x7FB7
pshXCU_6    =     0x7FB6
pshXCU_5    =     0x7FB5
pshXCU_4    =     0x7FB4
pshXCU_3    =     0x7FB3
pshXCU_2    =     0x7FB2
pshXCU_1    =     0x7FB1
pshXCU_0    =     0x7FB0

pulXCU_15   =     0x7FAF
pulXCU_14   =     0x7FAE
pulXCU_13   =     0x7FAD
pulXCU_12   =     0x7FAC
pulXCU_11   =     0x7FAB
pulXCU_10   =     0x7FAA
pulXCU_9    =     0x7FA9
pulXCU_8    =     0x7FA8
pulXCU_7    =     0x7FA7
pulXCU_6    =     0x7FA6
pulXCU_5    =     0x7FA5
pulXCU_4    =     0x7FA4
pulXCU_3    =     0x7FA3
pulXCU_2    =     0x7FA2
pulXCU_1    =     0x7FA1
pulXCU_0    =     0x7FA0

PC_DISC0    =     0x7F80  ;128-bit wide PC discontinuity trace buffer {0,1,2,3} 0=oldest exit, 1=oldest entry, 2=newest exit, 3=newest entry


;----------------------------------------------------------------------------------------------
;Integer math and logic OPERATOR memory-mapped addresses and corresponding results storage bins
;----------------------------------------------------------------------------------------------

AND_15      =     0x7EFF
AND_14      =     0x7EFE
AND_13      =     0x7EFD
AND_12      =     0x7EFC
AND_11      =     0x7EFB
AND_10      =     0x7EFA
AND_9       =     0x7EF9
AND_8       =     0x7EF8
AND_7       =     0x7EF7
AND_6       =     0x7EF6
AND_5       =     0x7EF5
AND_4       =     0x7EF4
AND_3       =     0x7EF3
AND_2       =     0x7EF2
AND_1       =     0x7EF1
AND_0       =     0x7EF0

OR_15       =     0x7EEF
OR_14       =     0x7EEE
OR_13       =     0x7EED
OR_12       =     0x7EEC
OR_11       =     0x7EEB
OR_10       =     0x7EEA
OR_9        =     0x7EE9
OR_8        =     0x7EE8
OR_7        =     0x7EE7
OR_6        =     0x7EE6
OR_5        =     0x7EE5
OR_4        =     0x7EE4
OR_3        =     0x7EE3
OR_2        =     0x7EE2
OR_1        =     0x7EE1
OR_0        =     0x7EE0

XOR_15      =     0x7EDF
XOR_14      =     0x7EDE
XOR_13      =     0x7EDD
XOR_12      =     0x7EDC
XOR_11      =     0x7EDB
XOR_10      =     0x7EDA
XOR_9       =     0x7ED9
XOR_8       =     0x7ED8
XOR_7       =     0x7ED7
XOR_6       =     0x7ED6
XOR_5       =     0x7ED5
XOR_4       =     0x7ED4
XOR_3       =     0x7ED3
XOR_2       =     0x7ED2
XOR_1       =     0x7ED1
XOR_0       =     0x7ED0

SHIFT_15    =     0x7ECF
SHIFT_14    =     0x7ECE
SHIFT_13    =     0x7ECD
SHIFT_12    =     0x7ECC
SHIFT_11    =     0x7ECB
SHIFT_10    =     0x7ECA
SHIFT_9     =     0x7EC9
SHIFT_8     =     0x7EC8
SHIFT_7     =     0x7EC7
SHIFT_6     =     0x7EC6
SHIFT_5     =     0x7EC5
SHIFT_4     =     0x7EC4
SHIFT_3     =     0x7EC3
SHIFT_2     =     0x7EC2
SHIFT_1     =     0x7EC1
SHIFT_0     =     0x7EC0

ADD_15      =     0x7EBF
ADD_14      =     0x7EBE
ADD_13      =     0x7EBD
ADD_12      =     0x7EBC
ADD_11      =     0x7EBB
ADD_10      =     0x7EBA
ADD_9       =     0x7EB9
ADD_8       =     0x7EB8
ADD_7       =     0x7EB7
ADD_6       =     0x7EB6
ADD_5       =     0x7EB5
ADD_4       =     0x7EB4
ADD_3       =     0x7EB3
ADD_2       =     0x7EB2
ADD_1       =     0x7EB1
ADD_0       =     0x7EB0

ADDC_15     =     0x7EAF
ADDC_14     =     0x7EAE
ADDC_13     =     0x7EAD
ADDC_12     =     0x7EAC
ADDC_11     =     0x7EAB
ADDC_10     =     0x7EAA
ADDC_9      =     0x7EA9
ADDC_8      =     0x7EA8
ADDC_7      =     0x7EA7
ADDC_6      =     0x7EA6
ADDC_5      =     0x7EA5
ADDC_4      =     0x7EA4
ADDC_3      =     0x7EA3
ADDC_2      =     0x7EA2
ADDC_1      =     0x7EA1
ADDC_0      =     0x7EA0

SUB_15      =     0x7E9F
SUB_14      =     0x7E9E
SUB_13      =     0x7E9D
SUB_12      =     0x7E9C
SUB_11      =     0x7E9B
SUB_10      =     0x7E9A
SUB_9       =     0x7E99
SUB_8       =     0x7E98
SUB_7       =     0x7E97
SUB_6       =     0x7E96
SUB_5       =     0x7E95
SUB_4       =     0x7E94
SUB_3       =     0x7E93
SUB_2       =     0x7E92
SUB_1       =     0x7E91
SUB_0       =     0x7E90

SUBB_15     =     0x7E8F
SUBB_14     =     0x7E8E
SUBB_13     =     0x7E8D
SUBB_12     =     0x7E8C
SUBB_11     =     0x7E8B
SUBB_10     =     0x7E8A
SUBB_9      =     0x7E89
SUBB_8      =     0x7E88
SUBB_7      =     0x7E87
SUBB_6      =     0x7E86
SUBB_5      =     0x7E85
SUBB_4      =     0x7E84
SUBB_3      =     0x7E83
SUBB_2      =     0x7E82
SUBB_1      =     0x7E81
SUBB_0      =     0x7E80

MUL_15      =     0x7E7F
MUL_14      =     0x7E7E
MUL_13      =     0x7E7D
MUL_12      =     0x7E7C
MUL_11      =     0x7E7B
MUL_10      =     0x7E7A
MUL_9       =     0x7E79
MUL_8       =     0x7E78
MUL_7       =     0x7E77
MUL_6       =     0x7E76
MUL_5       =     0x7E75
MUL_4       =     0x7E74
MUL_3       =     0x7E73
MUL_2       =     0x7E72
MUL_1       =     0x7E71
MUL_0       =     0x7E70

DIV_15      =     0x7E6F
DIV_14      =     0x7E6E
DIV_13      =     0x7E6D
DIV_12      =     0x7E6C
DIV_11      =     0x7E6B
DIV_10      =     0x7E6A
DIV_9       =     0x7E69
DIV_8       =     0x7E68
DIV_7       =     0x7E67
DIV_6       =     0x7E66
DIV_5       =     0x7E65
DIV_4       =     0x7E64
DIV_3       =     0x7E63
DIV_2       =     0x7E62
DIV_1       =     0x7E61
DIV_0       =     0x7E60
           
                        
;--------------------------------------------------------------------------
;FP OPERATOR memory-mapped addresses and corresponding results storage bins
;--------------------------------------------------------------------------

cnvFDCS_31  =     0x7ADF
cnvFDCS_30  =     0x7ADE
cnvFDCS_29  =     0x7ADD
cnvFDCS_28  =     0x7ADC
cnvFDCS_27  =     0x7ADB
cnvFDCS_26  =     0x7ADA
cnvFDCS_25  =     0x7AD9
cnvFDCS_24  =     0x7AD8
cnvFDCS_23  =     0x7AD7
cnvFDCS_22  =     0x7AD6
cnvFDCS_21  =     0x7AD5
cnvFDCS_20  =     0x7AD4
cnvFDCS_19  =     0x7AD3
cnvFDCS_18  =     0x7AD2
cnvFDCS_17  =     0x7AD1
cnvFDCS_16  =     0x7AD0
cnvFDCS_15  =     0x7ACF
cnvFDCS_14  =     0x7ACE
cnvFDCS_13  =     0x7ACD
cnvFDCS_12  =     0x7ACC
cnvFDCS_11  =     0x7ACB
cnvFDCS_10  =     0x7ACA
cnvFDCS_9   =     0x7AC9
cnvFDCS_8   =     0x7AC8
cnvFDCS_7   =     0x7AC7
cnvFDCS_6   =     0x7AC6
cnvFDCS_5   =     0x7AC5
cnvFDCS_4   =     0x7AC4
cnvFDCS_3   =     0x7AC3
cnvFDCS_2   =     0x7AC2
cnvFDCS_1   =     0x7AC1
cnvFDCS_0   =     0x7AC0

cnvTDCS_31  =     0x7ABF
cnvTDCS_30  =     0x7ABE
cnvTDCS_29  =     0x7ABD
cnvTDCS_28  =     0x7ABC
cnvTDCS_27  =     0x7ABB
cnvTDCS_26  =     0x7ABA
cnvTDCS_25  =     0x7AB9
cnvTDCS_24  =     0x7AB8
cnvTDCS_23  =     0x7AB7
cnvTDCS_22  =     0x7AB6
cnvTDCS_21  =     0x7AB5
cnvTDCS_20  =     0x7AB4
cnvTDCS_19  =     0x7AB3
cnvTDCS_18  =     0x7AB2
cnvTDCS_17  =     0x7AB1
cnvTDCS_16  =     0x7AB0
cnvTDCS_15  =     0x7AAF
cnvTDCS_14  =     0x7AAE
cnvTDCS_13  =     0x7AAD
cnvTDCS_12  =     0x7AAC
cnvTDCS_11  =     0x7AAB
cnvTDCS_10  =     0x7AAA
cnvTDCS_9   =     0x7AA9
cnvTDCS_8   =     0x7AA8
cnvTDCS_7   =     0x7AA7
cnvTDCS_6   =     0x7AA6
cnvTDCS_5   =     0x7AA5
cnvTDCS_4   =     0x7AA4
cnvTDCS_3   =     0x7AA3
cnvTDCS_2   =     0x7AA2
cnvTDCS_1   =     0x7AA1
cnvTDCS_0   =     0x7AA0

cnvFHCS_15  =     0x7A9F
cnvFHCS_14  =     0x7A9E
cnvFHCS_13  =     0x7A9D
cnvFHCS_12  =     0x7A9C
cnvFHCS_11  =     0x7A9B
cnvFHCS_10  =     0x7A9A
cnvFHCS_9   =     0x7A99
cnvFHCS_8   =     0x7A98
cnvFHCS_7   =     0x7A97
cnvFHCS_6   =     0x7A96
cnvFHCS_5   =     0x7A95
cnvFHCS_4   =     0x7A94
cnvFHCS_3   =     0x7A93
cnvFHCS_2   =     0x7A92
cnvFHCS_1   =     0x7A91
cnvFHCS_0   =     0x7A90

cnvTHCS_15  =     0x7A8F
cnvTHCS_14  =     0x7A8E
cnvTHCS_13  =     0x7A8D
cnvTHCS_12  =     0x7A8C
cnvTHCS_11  =     0x7A8B
cnvTHCS_10  =     0x7A8A
cnvTHCS_9   =     0x7A89
cnvTHCS_8   =     0x7A88
cnvTHCS_7   =     0x7A87
cnvTHCS_6   =     0x7A86
cnvTHCS_5   =     0x7A85
cnvTHCS_4   =     0x7A84
cnvTHCS_3   =     0x7A83
cnvTHCS_2   =     0x7A82
cnvTHCS_1   =     0x7A81
cnvTHCS_0   =     0x7A80

CONV_15     =     0x7A7F    
CONV_14     =     0x7A7E
CONV_13     =     0x7A7D
CONV_12     =     0x7A7C
CONV_11     =     0x7A7B
CONV_10     =     0x7A7A
CONV_9      =     0x7A79
CONV_8      =     0x7A78
CONV_7      =     0x7A77
CONV_6      =     0x7A76
CONV_5      =     0x7A75
CONV_4      =     0x7A74
CONV_3      =     0x7A73
CONV_2      =     0x7A72
CONV_1      =     0x7A71
CONV_0      =     0x7A70


RTOI_15    =     0x7A1F    
RTOI_14    =     0x7A1E
RTOI_13    =     0x7A1D
RTOI_12    =     0x7A1C
RTOI_11    =     0x7A1B
RTOI_10    =     0x7A1A
RTOI_9     =     0x7A19
RTOI_8     =     0x7A18
RTOI_7     =     0x7A17
RTOI_6     =     0x7A16
RTOI_5     =     0x7A15
RTOI_4     =     0x7A14
RTOI_3     =     0x7A13
RTOI_2     =     0x7A12
RTOI_1     =     0x7A11
RTOI_0     =     0x7A10


CTOI_15    =     0x797F    
CTOI_14    =     0x797E
CTOI_13    =     0x797D
CTOI_12    =     0x797C
CTOI_11    =     0x797B
CTOI_10    =     0x797A
CTOI_9     =     0x7979
CTOI_8     =     0x7978
CTOI_7     =     0x7977
CTOI_6     =     0x7976
CTOI_5     =     0x7975
CTOI_4     =     0x7974
CTOI_3     =     0x7973
CTOI_2     =     0x7972
CTOI_1     =     0x7971
CTOI_0     =     0x7970

CFI_15      =     0x796F
CFI_14      =     0x796E
CFI_13      =     0x796D
CFI_12      =     0x796C
CFI_11      =     0x796B
CFI_10      =     0x796A
CFI_9       =     0x7969
CFI_8       =     0x7968
CFI_7       =     0x7967
CFI_6       =     0x7966
CFI_5       =     0x7965
CFI_4       =     0x7964
CFI_3       =     0x7963
CFI_2       =     0x7962
CFI_1       =     0x7961
CFI_0       =     0x7960

SCALEB_15   =     0x795F       
SCALEB_14   =     0x795E
SCALEB_13   =     0x795D
SCALEB_12   =     0x795C
SCALEB_11   =     0x795B
SCALEB_10   =     0x795A
SCALEB_9    =     0x7959
SCALEB_8    =     0x7958
SCALEB_7    =     0x7957
SCALEB_6    =     0x7956
SCALEB_5    =     0x7955
SCALEB_4    =     0x7954
SCALEB_3    =     0x7953
SCALEB_2    =     0x7952
SCALEB_1    =     0x7951
SCALEB_0    =     0x7950

LOGB_15     =     0x794F
LOGB_14     =     0x794E
LOGB_13     =     0x794D
LOGB_12     =     0x794C
LOGB_11     =     0x794B
LOGB_10     =     0x794A
LOGB_9      =     0x7949
LOGB_8      =     0x7948
LOGB_7      =     0x7947
LOGB_6      =     0x7946
LOGB_5      =     0x7945
LOGB_4      =     0x7944
LOGB_3      =     0x7943
LOGB_2      =     0x7942
LOGB_1      =     0x7941
LOGB_0      =     0x7940

nextUp_15   =     0x793F      
nextUp_14   =     0x793E
nextUp_13   =     0x793D
nextUp_12   =     0x793C
nextUp_11   =     0x793B
nextUp_10   =     0x793A
nextUp_9    =     0x7939
nextUp_8    =     0x7938
nextUp_7    =     0x7937      
nextUp_6    =     0x7936
nextUp_5    =     0x7935
nextUp_4    =     0x7934
nextUp_3    =     0x7933
nextUp_2    =     0x7932
nextUp_1    =     0x7931
nextUp_0    =     0x7930

nextDwn_15  =     0x792F
nextDwn_14  =     0x792E
nextDwn_13  =     0x792D
nextDwn_12  =     0x792C
nextDwn_11  =     0x792B
nextDwn_10  =     0x792A
nextDwn_9   =     0x7929
nextDwn_8   =     0x7928
nextDwn_7   =     0x7927
nextDwn_6   =     0x7926
nextDwn_5   =     0x7925
nextDwn_4   =     0x7924
nextDwn_3   =     0x7923
nextDwn_2   =     0x7922
nextDwn_1   =     0x7921
nextDwn_0   =     0x7920

maxNumMg_15 =     0x791F                             
maxNumMg_14 =     0x791E                             
maxNumMg_13 =     0x791D                             
maxNumMg_12 =     0x791C 
maxNumMg_11 =     0x791B                             
maxNumMg_10 =     0x791A                             
maxNumMg_9  =     0x7919                             
maxNumMg_8  =     0x7918 
maxNumMg_7  =     0x7917                             
maxNumMg_6  =     0x7916                             
maxNumMg_5  =     0x7915                             
maxNumMg_4  =     0x7914 
maxNumMg_3  =     0x7913                             
maxNumMg_2  =     0x7912                             
maxNumMg_1  =     0x7911                             
maxNumMg_0  =     0x7910 
                       
minNumMg_15 =     0x790F                            
minNumMg_14 =     0x790E                            
minNumMg_13 =     0x790D                            
minNumMg_12 =     0x790C 
minNumMg_11 =     0x790B                            
minNumMg_10 =     0x790A                            
minNumMg_9  =     0x7909                            
minNumMg_8  =     0x7908 
minNumMg_7  =     0x7907                            
minNumMg_6  =     0x7906                            
minNumMg_5  =     0x7905                            
minNumMg_4  =     0x7904 
minNumMg_3  =     0x7903                            
minNumMg_2  =     0x7902                            
minNumMg_1  =     0x7901                            
minNumMg_0  =     0x7900 
                            
maxNum_15   =     0x78FF                         
maxNum_14   =     0x78FE                         
maxNum_13   =     0x78FD                         
maxNum_12   =     0x78FC 
maxNum_11   =     0x78FB                         
maxNum_10   =     0x78FA                         
maxNum_9    =     0x78F9                         
maxNum_8    =     0x78F8 
maxNum_7    =     0x78F7                         
maxNum_6    =     0x78F6                         
maxNum_5    =     0x78F5                         
maxNum_4    =     0x78F4 
maxNum_3    =     0x78F3                         
maxNum_2    =     0x78F2                         
maxNum_1    =     0x78F1                         
maxNum_0    =     0x78F0 
                           
minNum_15   =     0x78EF                          
minNum_14   =     0x78EE                          
minNum_13   =     0x78ED                          
minNum_12   =     0x78EC                          
minNum_11   =     0x78EB                          
minNum_10   =     0x78EA                          
minNum_9    =     0x78E9                          
minNum_8    =     0x78E8                          
minNum_7    =     0x78E7                          
minNum_6    =     0x78E6                          
minNum_5    =     0x78E5                          
minNum_4    =     0x78E4                          
minNum_3    =     0x78E3                          
minNum_2    =     0x78E2                          
minNum_1    =     0x78E1                          
minNum_0    =     0x78E0                          
                        
copy_15     =     0x78DF      
copy_14     =     0x78DE
copy_13     =     0x78DD
copy_12     =     0x78DC
copy_11     =     0x78DB      
copy_10     =     0x78DA
copy_9      =     0x78D9
copy_8      =     0x78D8
copy_7      =     0x78D7      
copy_6      =     0x78D6
copy_5      =     0x78D5
copy_4      =     0x78D4
copy_3      =     0x78D3      
copy_2      =     0x78D2
copy_1      =     0x78D1
copy_0      =     0x78D0

negate_15   =     0x78CF
negate_14   =     0x78CE
negate_13   =     0x78CD
negate_12   =     0x78CC
negate_11   =     0x78CB
negate_10   =     0x78CA
negate_9    =     0x78C9
negate_8    =     0x78C8
negate_7    =     0x78C7
negate_6    =     0x78C6
negate_5    =     0x78C5
negate_4    =     0x78C4
negate_3    =     0x78C3
negate_2    =     0x78C2
negate_1    =     0x78C1
negate_0    =     0x78C0

abs_15      =     0x78BF
abs_14      =     0x78BE
abs_13      =     0x78BD
abs_12      =     0x78BC
abs_11      =     0x78BB
abs_10      =     0x78BA
abs_9       =     0x78B9
abs_8       =     0x78B8
abs_7       =     0x78B7
abs_6       =     0x78B6
abs_5       =     0x78B5
abs_4       =     0x78B4
abs_3       =     0x78B3
abs_2       =     0x78B2
abs_1       =     0x78B1
abs_0       =     0x78B0

copySign_15 =     0x78AF
copySign_14 =     0x78AE
copySign_13 =     0x78AD
copySign_12 =     0x78AC
copySign_11 =     0x78AB
copySign_10 =     0x78AA
copySign_9  =     0x78A9
copySign_8  =     0x78A8
copySign_7  =     0x78A7
copySign_6  =     0x78A6
copySign_5  =     0x78A5
copySign_4  =     0x78A4
copySign_3  =     0x78A3
copySign_2  =     0x78A2
copySign_1  =     0x78A1
copySign_0  =     0x78A0

SQRT_31      =     0x789F              
SQRT_30      =     0x789E              
SQRT_29      =     0x789D              
SQRT_28      =     0x789C              
SQRT_27      =     0x789B              
SQRT_26      =     0x789A              
SQRT_25      =     0x7899              
SQRT_24      =     0x7898              
SQRT_23      =     0x7897              
SQRT_22      =     0x7896              
SQRT_21      =     0x7895              
SQRT_20      =     0x7894              
SQRT_19      =     0x7893              
SQRT_18      =     0x7892              
SQRT_17      =     0x7891              
SQRT_16      =     0x7890              
SQRT_15      =     0x788F              
SQRT_14      =     0x788E              
SQRT_13      =     0x788D              
SQRT_12      =     0x788C              
SQRT_11      =     0x788B              
SQRT_10      =     0x788A              
SQRT_9      =     0x7889              
SQRT_8      =     0x7888              
SQRT_7      =     0x7887              
SQRT_6      =     0x7886              
SQRT_5      =     0x7885              
SQRT_4      =     0x7884              
SQRT_3      =     0x7883              
SQRT_2      =     0x7882              
SQRT_1      =     0x7881              
SQRT_0      =     0x7880              

REM_31      =     0x787F
REM_30      =     0x787E
REM_29      =     0x787D
REM_28      =     0x787C
REM_27      =     0x787B
REM_26      =     0x787A
REM_25      =     0x7879
REM_24      =     0x7878
REM_23      =     0x7877
REM_22      =     0x7876
REM_21      =     0x7875
REM_20      =     0x7874
REM_19      =     0x7873
REM_18      =     0x7872
REM_17      =     0x7871
REM_16      =     0x7870
REM_15      =     0x786F
REM_14      =     0x786E
REM_13      =     0x786D
REM_12      =     0x786C
REM_11      =     0x786B
REM_10      =     0x786A
REM_9       =     0x7869
REM_8       =     0x7868
REM_7       =     0x7867
REM_6       =     0x7866
REM_5       =     0x7865
REM_4       =     0x7864
REM_3       =     0x7863
REM_2       =     0x7862
REM_1       =     0x7861
REM_0       =     0x7860
   
FDIV_15     =     0x785F
FDIV_14     =     0x785E
FDIV_13     =     0x785D
FDIV_12     =     0x785C
FDIV_11     =     0x785B
FDIV_10     =     0x785A
FDIV_9      =     0x7859
FDIV_8      =     0x7858
FDIV_7      =     0x7857
FDIV_6      =     0x7856
FDIV_5      =     0x7855
FDIV_4      =     0x7854
FDIV_3      =     0x7853
FDIV_2      =     0x7852
FDIV_1      =     0x7851
FDIV_0      =     0x7850

C_15        =     0x784F
C_14        =     0x784E
C_13        =     0x784D
C_12        =     0x784C
C_11        =     0x784B
C_10        =     0x784A
C_9         =     0x7849
C_8         =     0x7848
C_7         =     0x7847
C_6         =     0x7846
C_5         =     0x7845
C_4         =     0x7844
C_3         =     0x7843
C_2         =     0x7842
C_1         =     0x7841
C_0         =     0x7840

FMA_15      =     0x783F
FMA_14      =     0x783E
FMA_13      =     0x783D
FMA_12      =     0x783C
FMA_11      =     0x783B
FMA_10      =     0x783A
FMA_9       =     0x7839
FMA_8       =     0x7838
FMA_7       =     0x7837
FMA_6       =     0x7836
FMA_5       =     0x7835
FMA_4       =     0x7834
FMA_3       =     0x7833
FMA_2       =     0x7832
FMA_1       =     0x7831
FMA_0       =     0x7830

FMUL_15     =     0x782F
FMUL_14     =     0x782E
FMUL_13     =     0x782D
FMUL_12     =     0x782C
FMUL_11     =     0x782B
FMUL_10     =     0x782A
FMUL_9      =     0x7829
FMUL_8      =     0x7828
FMUL_7      =     0x7827
FMUL_6      =     0x7826
FMUL_5      =     0x7825
FMUL_4      =     0x7824
FMUL_3      =     0x7823
FMUL_2      =     0x7822
FMUL_1      =     0x7821
FMUL_0      =     0x7820

FSUB_15     =     0x781F
FSUB_14     =     0x781E
FSUB_13     =     0x781D
FSUB_12     =     0x781C
FSUB_11     =     0x781B
FSUB_10     =     0x781A
FSUB_9      =     0x7819
FSUB_8      =     0x7818
FSUB_7      =     0x7817
FSUB_6      =     0x7816
FSUB_5      =     0x7815
FSUB_4      =     0x7814
FSUB_3      =     0x7813
FSUB_2      =     0x7812
FSUB_1      =     0x7811
FSUB_0      =     0x7810

FADD_15     =     0x780F
FADD_14     =     0x780E
FADD_13     =     0x780D
FADD_12     =     0x780C
FADD_11     =     0x780B
FADD_10     =     0x780A
FADD_9      =     0x7809
FADD_8      =     0x7808
FADD_7      =     0x7807
FADD_6      =     0x7806
FADD_5      =     0x7805
FADD_4      =     0x7804
FADD_3      =     0x7803
FADD_2      =     0x7802
FADD_1      =     0x7801
FADD_0      =     0x7800

;--------------------------------------------------------------------------
;STATUS Register flags and respective bit positions
;--------------------------------------------------------------------------

subs_AbruptUndrFl = 63
subs_X            = 62
subs_Xor_X        = 61
subs_NXACT        = 50
subs_UNFL         = 59
subs_OVFL         = 58
subs_DIVBY0       = 57
subs_INV          = 56
                        
DEF_ONLY          = 55
AWAY              = 54     ;0=default is round nearest even; 1=default is round Away; 
RM_attrib         = 53     ;0=use 2-bit RM code in instruction; 1=force all rounding according to specifier code in bits 55 and 56
RM1               = 52     ;msb of forced rounding mode
RM0               = 51     ;lsb of forced rounding mode    00=default, 01=positive, 10=negative, 11=zero

compareTrue       = 50
isTrue            = 49
aFlagRaised       = 48
totlOrderMag      = 47
totlOrder         = 46

positiveInfinity  = 45
positiveNormal    = 44
positiveSubnormal = 43
positiveZero      = 42
negativeZero      = 41
negativeSubnormal = 40
negativeNormal    = 39
negativeInfinity  = 38
quietNaN          = 37
signalingNaN      = 36 
                      
AltImmInexact     = 35
AltImmUnderflow   = 34
AltImmOverflow    = 33
AltImmDivByZero   = 32
AltImmInvalid     = 31

RNF_NXACT         = 30
RNF_UNFL          = 29
RNF_OVFL          = 28
RNF_DIVBY0        = 27
RNF_INV           = 26

NXACTflag         = 25
UNFLflag          = 24
OVFLflag          = 23
DIVBY0flag        = 22   
INVflag           = 21
 
NXACTsignal       = 20
UNFLsignal        = 19
OVFLsignal        = 18
DIVBY0signal      = 17
INVsignal         = 16

spare4            = 15
spare3            = 14
spare2            = 13
spare1            = 12
spare0            = 11

IRQ               = 10   ;interrupt r=est input        read-only
ExcSource         = 9   ;source of an exception signal 0=operandA 1=operandB

A_GTE_B           = 8   ;1 = (A>=B)  notV_or_Z           read-only
A_LTE_B           = 7   ;1 = (A<=B)  ZorV                read-only
A_GT_B            = 6   ;1 = (A>B)   notV_and_notZ       read-only

IRQEN             = 5    ;interrupt enable bit position
DONE              = 4
V                 = 3   ;1 = (A<B)
C                 = 2
N                 = 1
Z                 = 0   ;1 = (A=B)

invalid           = 0x01
divByZero         = 0x02
overflow          = 0x04
underflow         = 0x08
inexact           = 0x10

Zbit              = 0x01
Nbit              = 0x02
Cbit              = 0x04
Vbit              = 0x08
DoneBit           = 0x10
intEnable         = 0x20

